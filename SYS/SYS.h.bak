#pragma once

#include <Windows.h>
#include <fstream>
#include <string>
#include <atlstr.h>
#include <stdio.h>
#include <sstream>
#include <iostream>
#include <random>
#include <time.h>
#include "Enum.h"
using namespace std;


static char m_sRootPath[] = "D:\\ControlServer\\";
static char m_sUIPath[] =   "D:\\ControlServer\\Query_Static_Pool_UI_hanle";
static char m_sSYSPath[] =   "D:\\ControlServer\\Query_Static_Pool_SYS_hanle";
static char m_sStaticPoolPath[] =   "D:\\ControlServer\\Static_Pool";
static wchar_t m_wtextSYS[100];
static wchar_t m_wtextUI[100];

static int m_nAttr;
static int m_nResultInt;
static SYSTEMTIME m_st;
static string m_sTime;

LPWSTR m_pCShandle;
FILE *m_WIP;
HANDLE m_handle;
struct MemoryPoolStruc {int value[IP::IntegerDataPoolMaxBoundary];};
struct MemoryPoolStruc* m_pMemPool;
//template <typename T> std::string i2s ( T Number );

void SimulateMultiThread();
void toUI(string sMsg);
void toUser(string sMsg);
void log2ui(string s);
void log2user(string s);
string GetTime();

int M_Sub_Sequence_b2(int nSeq_Outside);
int M_Sub_Sequence_b1(int nSeq_Outside);
int M_Sub_Sequence_B(int nSeq_Outside);
int M_Sub_Sequence_A(int nSeq_Outside);

void M_Car_CircleBlock(int nSeq_Now);
void M_Car_ForwardThenBackward(int nSeq_Now);
void M_Plane_CircleBlock(int nSeq_Now);
void M_Plane_ForwardThenBackward(int nSeq_Now);

void WSP(int location,int value);
void WP(int location,int value){m_pMemPool->value[location] = value;}
int RSP(int location);
int RP(int location){return  m_pMemPool->value[location];}

int MatchOneOfTheseWillApprove(int state_target,int nSeq_Now,int nSeq_Pre,int sp1);;
int MatchOneOfTheseWillApprove(bool bIsTrue,int nSeq_Now,int nSeq_Pre,int sp1,int sp2);
int MatchOneOfTheseWillApprove(int state_target,int nSeq_Now,int nSeq_Pre,int sp1,int sp2);
int MatchOneOfTheseWillApprove(bool bIsTrue,int nSeq_Now,int nSeq_Pre,int sp1,int sp2,int sp3);
int MatchOneOfTheseWillApprove(int state_target,int nSeq_Now,int nSeq_Pre,int sp1,int sp2,int sp3);
int MatchOneOfTheseWillApprove(bool bIsTrue,int nSeq_Now,int nSeq_Pre,int sp1,int sp2,int sp3,int sp4);
int MatchOneOfTheseWillApprove(int state_target,int nSeq_Now,int nSeq_Pre,int sp1,int sp2,int sp3,int sp4);





std::wstring s2ws(const std::string& s)
{
    int len;
    int slength = (int)s.length() + 1;
    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
    wchar_t* buf = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
    std::wstring r(buf);
    delete[] buf;
    return r;
}